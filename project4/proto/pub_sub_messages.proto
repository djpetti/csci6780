syntax = "proto3";

package pub_sub_messages;


/// look up result to be rippled through the name servers
message LookUpResult {
  /// the key of the value to retrieve
  uint32 key = 1;
  /// the value associated with the key
  string value = 2;
  /// the id's of each contacted server
  string server_ids = 3;
  /// the id of the server storing the value
  uint32 id = 4;
}

/// insert result to be rippled through the name server
message InsertResult {
  /// the key of the value to insert
  uint32 key = 1;
  /// the value to insert
  string value = 2;
  /// the id of the name server the key/val pair was inserted into
  uint32 id = 3;
  /// the id's of each contacted server
  string server_ids = 4;
}

/// delete result to be rippled through the name servers
message DeleteResult {
  /// the key of the key/val pair to delete
  uint32 key = 1;
  /// true if the key was successfully deleted, false if key was not found
  bool delete_success = 2;
  /// the id's of each contacted server
  string server_ids = 3;
}

/// entrance request sent by the entering name server to the bootstrap name server.
message EntranceRequest {
  /// the id of the entering name server
  uint32 id = 1;
}

/// entrance information to be rippled through the name servers.
message EntranceInformation {
  /// the id of the entering name server
  uint32 id = 1;
  /// the id of the successor of the entering name server
  uint32 successor_id = 2;
  /// the machine name of the entering name server's successor
  string successor_ip = 3;
  /// the port number the entering name server's successor is listening on
  uint32 successor_port = 4;
  /// the id of the predecessor of the entering name server
  uint32 predecessor_id = 5;
  /// the machine name of the entering name server's predecessor
  string predecessor_ip = 6;
  /// the port number the entering name server's predecessor is listening on
  uint32 predecessor_port = 7;
}

/// request to update predecessor to be sent by the entering name server to it's to-be successor.
message UpdatePredecessorRequest {
  /// the id of the name server's new predecessor
  uint32 id = 1;
  /// the ip of the name server's new predecessor
  string ip = 2;
  /// the port the name server's new predecessor is listening on
  uint32 port = 3;
}

/// exit information sent by the exiting name server to it's successor
message ExitInformation {
  /// the lower bounds of the exiting name server's key range.
  uint32 lowerRange = 1;
  /// the upper bounds of the exiting name server's key range.
  uint32 upperRange = 2;
  /// the currently stored keys.
  string keys = 3;
  /// the values associated with the currently stored keys.
  string values = 4;
  /// the id of the successor's new predecessor
  uint32 id = 5;
  /// the ip of the successor's new predecessor
  string ip = 6;
  /// the port the successor's new predecessor listens on.
  uint32 port = 7;
}

/// response for updating predecessor.
/// sent by the entering name server's successor to the entering name server.
message UpdatePredecessorResponse {
  /// the lower bounds of the entering name server's key range.
  uint32 lowerRange = 1;
  /// the upper bounds of the entering name server's key range.
  uint32 upperRange = 2;
  /// the currently stored keys.
  string keys = 3;
  /// the values associated with the currently stored keys.
  string values = 4;

}
/// request to update successor info.
/// sent by an entering name server to its to-be predecessor.
/// or sent by an exiting name server to it's predecessor.
message UpdateSuccessorRequest {
  /// the id of the predecessor's new successor.
  uint32 id = 1;
  /// the ip of the predecessor's new successor.
  string ip = 2;
  /// the port the predecessor's new successor is listening on.
  uint32 port = 3;
}
/// encapsulates all messages that can be received by the bootstrap name server
message BootstrapMessage {
  LookUpResult look_up_result = 1;
  InsertResult insert_result = 2;
  DeleteResult delete_result = 3;
  EntranceRequest entrance_request = 4;
}
/// encapsulates all messages that can be received by a name server
message NameServerMessage {
  EntranceInformation entrance_info = 1;
  ExitInformation exit_info = 2;
  UpdatePredecessorRequest update_pred_req = 3;
  UpdateSuccessorRequest update_succ_req = 4;
  UpdatePredecessorResponse update_pred_res = 5;
  LookUpResult look_up_result = 6;
  InsertResult insert_result = 7;
  DeleteResult delete_result = 8;
}